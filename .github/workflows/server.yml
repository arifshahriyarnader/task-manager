name: Server CI

on:
  push:
    branches: [ main ]
    paths:
      - 'server/*'
      - '.github/workflows/server.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'server/*'
      - '.github/workflows/server.yml'
  

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./server/package-lock.json

      - name: Install server dependencies
        run: npm install
        working-directory: ./server

      - name: Run tests (if any)
        run: npm test || echo "No tests"
        working-directory: ./server
      
      - name: Build app
        run: npm run build --if-present
        working-directory: ./server

     # - name: Configure AWS credentials
      #  uses: aws-actions/configure-aws-credentials@v2
      #  with:
       #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       #   aws-region: ${{ secrets.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      
      # - name: Build, tag, and push Docker image
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: taskmanager-backend
      #     IMAGE_TAG: Latest
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./server
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


       # - name: Deploy to AWS ECS
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      #   with:
      #     task-definition: taskdef.json
      #     service: TaskManager-Backend-Service
      #     cluster: TaskManager-Cluster
      #     wait-for-service-stability: true